{"version":3,"sources":["app/components/CleanPage/PanelControl/HeaderControl.js","app/components/CleanPage/PanelControl/PanelControl.js","app/components/CleanPage/PublicGroup/PublicInfo.js","app/components/CleanPage/PublicGroup/ProgressBar.js","app/components/CleanPage/PublicGroup/PublicAvatar.js","app/components/CleanPage/PublicGroup/Public.js","app/components/CleanPage/PublicGroup/AddPublicButton.js","services/services.api.js","store/reducers/reducer.clean.js","app/components/CleanPage/InputModal.js","app/components/CleanPage/VideoGuide.js","app/components/CleanPage/CleanPage.js","app/components/TopBar.js","app/components/AddMoneyPage/AddMoneyPage.js","app/components/FeedbackPage/FeedbackPage.js","app/App.js","serviceWorker.js","store/reducers/reducer.root.js","store/index.js","index.js"],"names":["HeaderControl","_this$props","this","props","text","children","onClick","style","react_default","a","createElement","className","Component","PanelControl","_this","PanelControl_HeaderControl","visibility","fa","onCleanClick","PublicInfo","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Fragment","peopleCount","onStartClean","xmlns","width","height","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","cx","cy","r","x1","y1","x2","y2","deletedPeople","ProgressBar","status","concat","progress","React","PublicAvatar","src","url","alt","Public","PublicAvatar_PublicAvatar","avatar_url","name","cleanData","isCleaning","ProgressBar_ProgressBar","PublicInfo_PublicInfo","followers","dogs","onClean","id","AddPublicButton","VK","window","API_URL","API","getGroupsPromise","axios","get","authHeaderDogsAPI","Promise","resolve","reject","init","api","filter","extended","fields","v","data","groups","normalizeVKGroupsData","response","items","console","log","array","map","converter","item","photo_100","params","user_vk_id","user_id","auth_key","GET_USER_GROUPS","LOAD_GROUPS","Load","Loaded","Errors","LOAD_CLEAN_TASKS","initialState","loading","errors","hotDogsGroups","cleanTasks","GetUserGroups","dispatch","startLoading","then","res","type","payload","stopLoading","LoadGroups","groupsData","LoadCleanTasks","cleanTasksData","loadingProperty","InputModal","call","state","setState","swal","setActionValue","_this2","target","rel","href","placeholder","onChange","e","changeText","VideoGuide","title","frameBorder","allowFullScreen","CLEAN_TASK_ERRORS","CleanPage","publics","redirect","renderGroups","length","publik","CleanPage_PublicGroup_Public","assign","loadGroups","loadCleanTasks","timerId","setInterval","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","updateCleanTasks","stop","addCleanTaskToGroups","setGroups","clearInterval","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","group","cleanTaskIsFinished","showFinishedAlert","err","return","content","button","addingPublicLink","convertPublicLinkToId","publicId","_context6","t0","addPublicAndGetItsData","newPublic","_callee5","_context5","_this3","startCleanPublicById","prevState","getDogsCount","getPublicById","startCleanTasks","error","getAccessTokenFromUser","accessToken","setAccessToken","showNotEnoughMoneyModal","setCleaningStateOnPublicById","_callee7","_context7","_this4","updateBalance","link","searchElement","includes","Error","slice","indexOf","isId","getPublicId","resolvePublicName","public_ids","getPublicIds","setCleaningStateOnPublics","_callee10","_context10","_this5","publicIndex","findIndex","post","cleanTask","screen_name","_ref5","object_id","Boolean","match","vk_id","dogs_count","wrapper","document","ReactDOM","render","InputModal_InputModal","el","firstChild","buttons","confirm","getAccessTokenFromLink","token","patch","access_token","_this6","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","_callee17","_context17","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","public_id","_iterator2","_callee18","_context18","getCleanTasks","refreshPublicById","showCommentAlert","_this7","CleanPage_PanelControl_PanelControl","AddPublicButton_AddPublicButton","showModal","Redirect","to","push","getFreshPublic","freshPublic","_callee21","_context21","_this8","freshPublicIndex","find","money","icon","connect","_ref9","clean","bindActionCreators","TopBar","NavLink","balance","AddMoneyPage","action","method","htmlFor","autoComplete","FeedbackPage","Widgets","Comments","limit","attach","getQueryParam","param","query","location","search","substring","urlParams","vars","split","i","pair","Sentry","dsn","process","REACT_APP_SENTRY_DSN","App","newBalance","errorInfo","scope","keys","forEach","setExtra","getUserBalance","setBalance","BrowserRouter","basename","react","components_TopBar","Switch","Route","exact","path","components_CleanPage_CleanPage","bind","component","components_AddMoneyPage_AddMoneyPage","hostname","combineReducers","objectSpread","middleware","thunk","devToolsExtension","enhancers","composedEnhancers","compose","applyMiddleware","store","createStore","rootReducer","es","app_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5204d5d7.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass HeaderControl extends Component {\r\n    render() {\r\n        const {text, children, onClick, style} = this.props\r\n        return (\r\n            <div\r\n                className=\"header-control\"\r\n                onClick={() => onClick()}\r\n                style={style}\r\n            >\r\n                <div className=\"header-control__icon\">{children}</div>\r\n                <span>{text}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default HeaderControl\r\n","import React, {Component} from 'react'\r\nimport HeaderControl from './HeaderControl'\r\nimport {FaSync, FaTrashAlt, FaBroom} from 'react-icons/fa'\r\nclass PanelControl extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"panel-control\">\r\n                <HeaderControl text=\"Обновить\" style={{visibility: 'hidden'}}>\r\n                    <FaSync />\r\n                </HeaderControl>\r\n                <HeaderControl\r\n                    text=\"Очистить все\"\r\n                    onClick={() => this.props.onCleanClick()}\r\n                >\r\n                    <FaBroom />\r\n                </HeaderControl>\r\n                <HeaderControl text=\"Удалить\" style={{visibility: 'hidden'}}>\r\n                    <FaTrashAlt />\r\n                </HeaderControl>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PanelControl\r\n","import React, {Component} from 'react'\r\nimport {FaBroom, FaUsers} from 'react-icons/fa'\r\nimport * as PropTypes from 'prop-types'\r\nimport HeaderControl from '../PanelControl/HeaderControl'\r\n\r\nexport class PublicInfo extends Component {\r\n    render() {\r\n        return <>\r\n            <div className=\"public__info__container public__info--all\">\r\n                <FaUsers/>\r\n                {this.props.peopleCount}\r\n            </div>\r\n            <div className=\"public__info__container\">\r\n                <HeaderControl\r\n                    text=\"Очистить\"\r\n                    onClick={() => this.props.onStartClean()}\r\n                >\r\n                    <FaBroom />\r\n                </HeaderControl>\r\n            </div>\r\n            <div className=\"public__info__container public__info--deleted\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\r\n                     stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n                     className=\"feather feather-user-x\">\r\n                    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\r\n                    <circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle>\r\n                    <line x1=\"18\" y1=\"8\" x2=\"23\" y2=\"13\"></line>\r\n                    <line x1=\"23\" y1=\"8\" x2=\"18\" y2=\"13\"></line>\r\n                </svg>\r\n                {this.props.deletedPeople}\r\n            </div>\r\n        </>\r\n    }\r\n}\r\n\r\nPublicInfo.propTypes = {\r\n    peopleCount: PropTypes.any,\r\n    deletedPeople: PropTypes.any\r\n}","import React from 'react'\r\nimport './ProgressBar.css'\r\n\r\nclass ProgressBar extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"progress-position\">\r\n                <span className={'progress-status'}>{this.props.status}</span>\r\n                <div className=\"progress\">\r\n                    <div\r\n                        className=\"progress-bar main-progress-bar\"\r\n                        style={{width: `${this.props.progress}%`}}\r\n                    >\r\n                        <span className=\"percent\">{this.props.progress}%</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {ProgressBar}\r\n","import React, {Component} from 'react'\r\n\r\nexport class PublicAvatar extends Component {\r\n    render() {\r\n        return <img\r\n            className=\"public__heading__img\"\r\n            src={this.props.url}\r\n            alt=\"pub img\"\r\n        />\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport {PublicInfo} from './PublicInfo'\r\nimport {ProgressBar} from './ProgressBar'\r\nimport {PublicAvatar} from './PublicAvatar'\r\nimport './Public.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass Public extends Component {\r\n    static propTypes = {\r\n        id: PropTypes.number.isRequired,\r\n        vk_id: PropTypes.number.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        avatar_url: PropTypes.string.isRequired,\r\n        followers: PropTypes.number.isRequired,\r\n        dogs: PropTypes.oneOf(PropTypes.number, PropTypes.string).isRequired,\r\n        cleanData: PropTypes.shape({\r\n            isCleaning: PropTypes.bool.isRequired,\r\n            progress: PropTypes.number,\r\n            status: PropTypes.string\r\n        }).isRequired,\r\n        onClean: PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"public-wrapper\">\r\n                <div className=\"public\">\r\n                    <div className=\"public__heading\">\r\n                        <PublicAvatar url={this.props.avatar_url} />\r\n                        <div className=\"public__heading__name\">\r\n                            {this.props.name}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"public__info\">\r\n                        {this.props.cleanData.isCleaning ? (\r\n                            <ProgressBar\r\n                                progress={this.props.cleanData.progress}\r\n                                status={this.props.cleanData.status}\r\n                            />\r\n                        ) : (\r\n                            <PublicInfo\r\n                                peopleCount={this.props.followers}\r\n                                deletedPeople={this.props.dogs}\r\n                                onStartClean={() => this.props.onClean(this.props.id)}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Public\r\n","import React, {Component} from 'react'\r\nimport * as PropTypes from 'prop-types'\r\n\r\nexport class AddPublicButton extends Component {\r\n    render() {\r\n        return <div\r\n            className=\"btn btn__add\"\r\n            onClick={this.props.onClick}\r\n        >\r\n            Добавить Сообщество\r\n        </div>\r\n    }\r\n}\r\n\r\nAddPublicButton.propTypes = {onClick: PropTypes.func}","import axios from 'axios'\r\n\r\nconst VK = window.VK\r\n\r\nconst API_URL = 'https://hot-dog.site/api'\r\n\r\nexport const API = {\r\n    getUserGroups: () => {\r\n        return getGroupsPromise\r\n    },\r\n    loadGroups: () =>\r\n        axios.get(API_URL + '/getPublics', authHeaderDogsAPI()),\r\n    loadCleanTasks: () =>\r\n        axios.get(API_URL + '/getCleanTasks', authHeaderDogsAPI())\r\n}\r\n\r\nconst getGroupsPromise = new Promise((resolve, reject) => {\r\n    VK.init(\r\n        () => {\r\n            VK.api(\r\n                'groups.get',\r\n                {\r\n                    filter: 'moder',\r\n                    extended: '1',\r\n                    fields: 'photo_100',\r\n                    v: '5.85'\r\n                },\r\n                (data) => {\r\n                    const groups = normalizeVKGroupsData(data.response.items)\r\n                    // const groupsCount = data.response.count\r\n                    // console.log(`Got ${groupsCount} publics from VK:`)\r\n                    // console.log(groups)\r\n                    resolve(groups)\r\n                }\r\n            )\r\n        },\r\n        () => {\r\n            console.log('VK API initialization failed')\r\n            reject('Groups fetch failed')\r\n        },\r\n        '5.85'\r\n    )\r\n})\r\n\r\nconst normalizeVKGroupsData = (array) => {\r\n    return array.map(converter)\r\n}\r\n\r\nconst converter = (item) => {\r\n    // noinspection JSUnresolvedVariable\r\n    return {\r\n        avatar_url: item.photo_100,\r\n        id: item.id,\r\n        name: item.name\r\n    }\r\n}\r\n\r\nconst authHeaderDogsAPI = () => {\r\n    return {\r\n        params: {\r\n            user_vk_id: window.user_id,\r\n            auth_key: window.auth_key\r\n        }\r\n    }\r\n}\r\n","import {API} from '../../services/services.api'\r\n\r\nexport const GET_USER_GROUPS = {\r\n    Load: 'groups/USER_GROUPS_LOAD',\r\n    Loaded: 'groups/USER_GROUPS_LOADED',\r\n    Errors: 'groups/USER_GROUPS_ERRORS'\r\n}\r\nexport const LOAD_GROUPS = {\r\n    Load: 'groups/GROUPS_LOAD',\r\n    Loaded: 'groups/GROUPS_LOADED',\r\n    Errors: 'groups/GROUPS_ERRORS'\r\n}\r\nexport const LOAD_CLEAN_TASKS = {\r\n    Load: 'tasks/LOAD_CLEAN_TASKS',\r\n    Loaded: 'tasks/CLEAN_TASKS_LOADED',\r\n    Errors: 'tasks/CLEAN_TASKS_ERRORS'\r\n}\r\n\r\nconst initialState = {\r\n    groups: {\r\n        data: [],\r\n        loading: true,\r\n        errors: []\r\n    },\r\n    hotDogsGroups: {\r\n        data: [],\r\n        loading: true,\r\n        errors: []\r\n    },\r\n    cleanTasks: {\r\n        data: [],\r\n        loading: true,\r\n        errors: []\r\n    }\r\n}\r\n\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case GET_USER_GROUPS.Load: {\r\n            return {\r\n                ...state,\r\n                groups: {\r\n                    ...state.groups,\r\n                    loading: true\r\n                }\r\n            }\r\n        }\r\n        case GET_USER_GROUPS.Loaded: {\r\n            const groups = action.payload\r\n            console.log('PUT IN STATE', groups)\r\n            return {\r\n                ...state,\r\n                groups\r\n            }\r\n        }\r\n        case LOAD_GROUPS.Load: {\r\n            return {\r\n                ...state,\r\n                hotDogsGroups: {\r\n                    ...state.hotDogsGroups,\r\n                    loading: true\r\n                }\r\n            }\r\n        }\r\n        case LOAD_GROUPS.Loaded: {\r\n            const hotDogsGroups = action.payload\r\n            return {\r\n                ...state,\r\n                hotDogsGroups\r\n            }\r\n        }\r\n        case LOAD_CLEAN_TASKS.Load: {\r\n            return {\r\n                ...state,\r\n                cleanTasks: {\r\n                    ...state.cleanTasks,\r\n                    loading: true\r\n                }\r\n            }\r\n        }\r\n        case LOAD_CLEAN_TASKS.Loaded: {\r\n            const cleanTasks = action.payload\r\n            return {\r\n                ...state,\r\n                cleanTasks: {\r\n                    loading: false,\r\n                    data: cleanTasks,\r\n                    errors: []\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const GetUserGroups = () => {\r\n    return (dispatch) => {\r\n        startLoading(LOAD_GROUPS, dispatch)\r\n        const groups = API.getUserGroups()\r\n        groups.then((res) => {\r\n            dispatch({type: GET_USER_GROUPS.Loaded, payload: res})\r\n        })\r\n        stopLoading(LOAD_GROUPS, dispatch)\r\n    }\r\n}\r\n\r\nexport const LoadGroups = () => {\r\n    return (dispatch) => {\r\n        startLoading(LOAD_GROUPS, dispatch)\r\n        API.loadGroups().then((response) => {\r\n            const groupsData = response.data\r\n            dispatch({\r\n                type: LOAD_GROUPS.Loaded,\r\n                payload: groupsData\r\n            })\r\n            stopLoading(LOAD_GROUPS, dispatch)\r\n        })\r\n    }\r\n}\r\n\r\nexport const LoadCleanTasks = () => {\r\n    return (dispatch) => {\r\n        startLoading(LOAD_CLEAN_TASKS, dispatch)\r\n\r\n        API.loadCleanTasks().then((response) => {\r\n            const cleanTasksData = response.data\r\n            dispatch({type: LOAD_CLEAN_TASKS.Loaded, payload: cleanTasksData})\r\n            stopLoading(LOAD_CLEAN_TASKS, dispatch)\r\n        })\r\n    }\r\n}\r\n\r\nconst startLoading = (loadingProperty, dispatch) => {\r\n    dispatch({\r\n        type: loadingProperty.Load\r\n    })\r\n}\r\nconst stopLoading = (loadingProperty, dispatch) => {\r\n    dispatch({\r\n        type: loadingProperty.Loaded\r\n    })\r\n}\r\n","import React from 'react'\r\nimport swal from 'sweetalert'\r\nimport './InputModal.css'\r\n\r\nconst OAUTH_LINK =\r\n    'https://oauth.vk.com/authorize?client_id=6726221&redirect_uri=https://oauth.vk.com/blank.html&display=page&response_type=token&v=5.85&scope=groups,offline'\r\nconst PLACEHOLDER_ACCESS_TOKEN = 'https://oauth.vk.com/blank.html#access_token=1383bc6d5df7bf74655b531297c71617b2345687ca&expires_in=0&user_id=159204098'\r\n\r\nclass InputModal extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {text: ''}\r\n    }\r\n\r\n    changeText(text) {\r\n        this.setState({text: text})\r\n        swal.setActionValue(text)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"modal__text\">\r\n                    <p>Нет доступа к управлению вашими сообществами</p>\r\n                    <p>\r\n                        Для решения этой проблемы перейдите, по{' '}\r\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={OAUTH_LINK}>этой ссылке</a>.\r\n                    </p>\r\n                    <p>Разрешите доступ нашему приложению</p>\r\n                    <p>\r\n                        ВКонтакте покажет страницу, сообщающую, что не стоит\r\n                        передавать данные из адресной строки\r\n                    </p>\r\n                    <p>\r\n                        Однако, это абсолютно безопасно в случае с нашим\r\n                        приложением\r\n                    </p>\r\n                    <p>Скопируйте целиком URL и вставьте в поле ниже:</p>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder={PLACEHOLDER_ACCESS_TOKEN}\r\n                        value={this.state.text}\r\n                        onChange={(e) => {\r\n                            this.changeText(e.target.value)\r\n                        }}\r\n                    />\r\n                    <p>\r\n                        Это необходимо для получения доступа к удалению\r\n                        заблокированных пользователей\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {InputModal}\r\n","import React from 'react'\r\n\r\nexport function VideoGuide() {\r\n    return (\r\n        <iframe\r\n            title={\"video guide\"}\r\n            src=\"//vk.com/video_ext.php?oid=-171466987&id=456239020&hash=2a4b21d6648495d0&hd=1\"\r\n            width=\"426\"\r\n            height=\"210\"\r\n            frameBorder=\"0\"\r\n            allowFullScreen\r\n        />\r\n    )\r\n}","import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport PanelControl from './PanelControl/PanelControl'\r\nimport Public from './PublicGroup/Public'\r\nimport {bindActionCreators} from 'redux'\r\nimport {AddPublicButton} from './PublicGroup/AddPublicButton'\r\nimport swal from 'sweetalert'\r\nimport axios from 'axios'\r\nimport {\r\n    GetUserGroups,\r\n    LoadGroups,\r\n    LoadCleanTasks\r\n} from '../../../store/reducers/reducer.clean'\r\nimport ReactDOM from 'react-dom'\r\nimport {InputModal} from './InputModal'\r\nimport {VideoGuide} from './VideoGuide'\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nconst CLEAN_TASK_ERRORS = ['Возникла ошибка', 'Завершили'] // errors? finished != error\r\n\r\nclass CleanPage extends Component {\r\n    state = {\r\n        publics: [],\r\n        redirect: false\r\n    }\r\n\r\n    async componentWillMount() {\r\n        const {GetUserGroups, LoadGroups, LoadCleanTasks} = this.props\r\n        GetUserGroups()\r\n        LoadGroups()\r\n        LoadCleanTasks()\r\n\r\n        let groups = await this.loadGroups()\r\n\r\n        const cleanTasks = await this.loadCleanTasks()\r\n\r\n        if (cleanTasks && cleanTasks.length)\r\n            this.timerId = setInterval(async () => {\r\n                await this.updateCleanTasks()\r\n            }, 1500)\r\n        groups = this.addCleanTaskToGroups(groups, cleanTasks)\r\n        this.setGroups(groups)\r\n    }\r\n\r\n    renderGroups = (groups) => {\r\n        if (!groups.length) return null\r\n        return groups.map((publik) => <Public {...publik} key={publik.id} />)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.timerId) {\r\n            clearInterval(this.timerId)\r\n        }\r\n    }\r\n\r\n    setGroups(groups) {\r\n        for (const group of groups) {\r\n            if (this.cleanTaskIsFinished(group.cleanData)) {\r\n                this.showFinishedAlert(group)\r\n            }\r\n        }\r\n        this.setState({publics: groups})\r\n    }\r\n\r\n    async loadCleanTasks() {\r\n        return (await axios.get('https://hot-dog.site/api/getCleanTasks', {\r\n            params: {\r\n                user_vk_id: window.user_id,\r\n                auth_key: window.auth_key\r\n            }\r\n        })).data\r\n    }\r\n\r\n    async loadGroups() {\r\n        return (await axios.get('https://hot-dog.site/api/getPublics', {\r\n            params: {\r\n                user_vk_id: window.user_id,\r\n                auth_key: window.auth_key\r\n            }\r\n        })).data\r\n    }\r\n\r\n    async showModal() {\r\n        const addingPublicLink = await swal({\r\n            text: 'Введите ссылку на сообщество:',\r\n            content: 'input',\r\n            button: 'Добавить!'\r\n        })\r\n        let publicId\r\n        try {\r\n            publicId = await this.convertPublicLinkToId(addingPublicLink)\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n        const newPublic = await this.addPublicAndGetItsData(publicId)\r\n        newPublic.dogs = 'анализ'\r\n        newPublic.cleanData = {\r\n            isCleaning: false\r\n        }\r\n        newPublic.onClean = async () => {\r\n            await this.startCleanPublicById(newPublic.id)\r\n        }\r\n        console.log(newPublic)\r\n        this.setState((prevState) => {\r\n            console.log(prevState)\r\n            const publics = prevState.publics.concat(newPublic)\r\n            console.log(publics)\r\n            return {publics: publics}\r\n        })\r\n        const dogs = await this.getDogsCount(newPublic.id)\r\n        this.setState((prevState) => {\r\n            const alreadyAddedPublic = this.getPublicById(\r\n                prevState.publics,\r\n                newPublic.id\r\n            )\r\n            alreadyAddedPublic.dogs = dogs\r\n            return {publics: prevState.publics}\r\n        })\r\n    }\r\n\r\n    async startCleanPublicById(publicId) {\r\n        const response = await this.startCleanTasks([publicId])\r\n        if ('error' in response) {\r\n            if (response.error.id === 1) {\r\n                const accessToken = await this.getAccessTokenFromUser()\r\n                await this.setAccessToken(accessToken)\r\n                return await this.onStartClean()\r\n            } else if (response.error.id === 2) {\r\n                await this.showNotEnoughMoneyModal(response.error.value)\r\n            }\r\n        } else {\r\n            const publics = this.setCleaningStateOnPublicById(publicId)\r\n            this.setGroups(publics)\r\n            this.timerId = setInterval(async () => {\r\n                await this.updateCleanTasks()\r\n                console.log(this)\r\n                await this.props.updateBalance()\r\n            }, 1500)\r\n        }\r\n    }\r\n\r\n    async convertPublicLinkToId(link) {\r\n        const searchElement = 'vk.com/'\r\n        if (!link.includes(searchElement)) {\r\n            throw new Error('no vk.com in link')\r\n        }\r\n        const name = link.slice(\r\n            link.indexOf(searchElement) + searchElement.length\r\n        )\r\n        if (this.isId(name)) {\r\n            return this.getPublicId(name)\r\n        }\r\n        return await this.resolvePublicName(name)\r\n    }\r\n\r\n    async onStartClean() {\r\n        const public_ids = this.getPublicIds()\r\n        const response = await this.startCleanTasks(public_ids)\r\n        if ('error' in response) {\r\n            if (response.error.id === 1) {\r\n                const accessToken = await this.getAccessTokenFromUser()\r\n                await this.setAccessToken(accessToken)\r\n                return await this.onStartClean()\r\n            } else if (response.error.id === 2) {\r\n                await this.showNotEnoughMoneyModal(response.error.value)\r\n            }\r\n        } else {\r\n            const publics = this.setCleaningStateOnPublics()\r\n            this.setGroups(publics)\r\n            this.timerId = setInterval(async () => {\r\n                await this.updateCleanTasks()\r\n                await this.props.updateBalance()\r\n            }, 1500)\r\n        }\r\n    }\r\n\r\n    setCleaningStateOnPublics() {\r\n        return this.state.publics.map((item) => {\r\n            item.cleanData = {\r\n                isCleaning: true,\r\n                progress: 0,\r\n                status: 'Отправляем запрос'\r\n            }\r\n            return item\r\n        })\r\n    }\r\n\r\n    setCleaningStateOnPublicById(publicId) {\r\n        const publics = this.state.publics.slice()\r\n        const publicIndex = publics.findIndex((item) => item.id === publicId)\r\n        publics[publicIndex].cleanData = {\r\n            isCleaning: true,\r\n            progress: 0,\r\n            status: 'Отправляем запрос'\r\n        }\r\n        return publics\r\n    }\r\n\r\n    async startCleanTasks(public_ids) {\r\n        return (await axios.post('https://hot-dog.site/api/startCleanTasks', {\r\n            user_vk_id: window.user_id,\r\n            auth_key: window.auth_key,\r\n            public_ids: public_ids\r\n        })).data\r\n    }\r\n\r\n    cleanTaskIsFinished(cleanTask) {\r\n        return CLEAN_TASK_ERRORS.includes(cleanTask.status)\r\n    }\r\n\r\n    getPublicIds() {\r\n        return this.state.publics.map((item) => item.id)\r\n    }\r\n\r\n    resolvePublicName(name) {\r\n        return new Promise((resolve, reject) => {\r\n            /*global VK*/\r\n            VK.api(\r\n                'utils.resolveScreenName',\r\n                {\r\n                    screen_name: name,\r\n                    v: '5.85'\r\n                },\r\n                ({response}) => {\r\n                    if (response.type === 'group') {\r\n                        // noinspection JSUnresolvedVariable\r\n                        resolve(response.object_id)\r\n                    }\r\n                    reject('not group')\r\n                }\r\n            )\r\n        })\r\n    }\r\n\r\n    isId(name) {\r\n        return Boolean(name.match(/^((club)|(public))\\d+$/))\r\n    }\r\n\r\n    getPublicId(id) {\r\n        return +id.match(/\\d+$/)[0]\r\n    }\r\n\r\n    async addPublicAndGetItsData(publicId) {\r\n        return (await axios.post('https://hot-dog.site/api/addPublic', {\r\n            user_vk_id: window.user_id,\r\n            auth_key: window.auth_key,\r\n            vk_id: publicId\r\n        })).data\r\n    }\r\n\r\n    async getDogsCount(publicId) {\r\n        // noinspection JSUnresolvedVariable\r\n        return (await axios.get('https://hot-dog.site/api/getDogsCount', {\r\n            params: {\r\n                id: publicId,\r\n                user_vk_id: window.user_id,\r\n                auth_key: window.auth_key\r\n            }\r\n        })).data.dogs_count\r\n    }\r\n\r\n    async getAccessTokenFromUser() {\r\n        let wrapper = window.document.createElement('div')\r\n        ReactDOM.render(<InputModal />, wrapper)\r\n        let el = wrapper.firstChild\r\n        const response = await swal({\r\n            title: 'Упс. Мы не можем очистить ваши сообщества',\r\n            content: el,\r\n            buttons: {\r\n                confirm: {\r\n                    text: 'Сохранить и запустить!',\r\n                    value: ''\r\n                }\r\n            }\r\n        })\r\n        return this.getAccessTokenFromLink(response)\r\n    }\r\n\r\n    async setAccessToken(token) {\r\n        return await axios.patch('https://hot-dog.site/api/setAccessToken', {\r\n            access_token: token,\r\n            user_vk_id: window.user_id,\r\n            auth_key: window.auth_key\r\n        })\r\n    }\r\n\r\n    addCleanTaskToGroups(publics, cleanTasks) {\r\n        if (cleanTasks && cleanTasks.length) {\r\n            for (const publik of publics) {\r\n                publik.onClean = async () => {\r\n                    await this.startCleanPublicById(publik.id)\r\n                }\r\n                for (const cleanTask of cleanTasks) {\r\n                    // noinspection JSUnresolvedVariable\r\n                    if (publik.id === cleanTask.public_id)\r\n                        publik.cleanData = {\r\n                            isCleaning: true,\r\n                            progress: cleanTask.progress,\r\n                            status: cleanTask.status\r\n                        }\r\n                }\r\n                if (!publik.cleanData) {\r\n                    publik.cleanData = {\r\n                        isCleaning: false\r\n                    }\r\n                }\r\n            }\r\n            return publics\r\n        }\r\n        return publics.map((publik) => {\r\n            publik.cleanData = {isCleaning: false}\r\n            publik.onClean = async () => {\r\n                await this.startCleanPublicById(publik.id)\r\n            }\r\n            return publik\r\n        })\r\n    }\r\n\r\n    async getCleanTasks() {\r\n        return (await axios.get('https://hot-dog.site/api/getCleanTasks', {\r\n            params: {\r\n                user_vk_id: window.user_id,\r\n                auth_key: window.auth_key\r\n            }\r\n        })).data\r\n    }\r\n\r\n    async updateCleanTasks() {\r\n        const cleanTasks = await this.getCleanTasks()\r\n        if (!(cleanTasks && cleanTasks.length)) {\r\n            clearInterval(this.timerId)\r\n            for (const publik of this.state.publics) {\r\n                await this.refreshPublicById(publik.id)\r\n            }\r\n            await this.showCommentAlert()\r\n            return\r\n        }\r\n        const publics = this.addCleanTaskToGroups(\r\n            this.state.publics,\r\n            cleanTasks\r\n        )\r\n        this.setGroups(publics)\r\n    }\r\n\r\n    showFinishedAlert(publik) {}\r\n\r\n    render() {\r\n        const {publics} = this.state\r\n        return (\r\n            <div className=\"clean\">\r\n                <PanelControl onCleanClick={() => this.onStartClean()} />\r\n                <div className=\"publics\">\r\n                    {publics && this.renderGroups(publics)}\r\n                </div>\r\n                <AddPublicButton onClick={() => this.showModal()} />\r\n                <VideoGuide />\r\n                {/*{showGroupsModal && <Modal/>}*/}\r\n                {this.state.redirect && (\r\n                    <Redirect to={this.state.redirect} push />\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    async refreshPublicById(publicId) {\r\n        const freshPublic = await this.getFreshPublic(publicId)\r\n        freshPublic.cleanData = {\r\n            isCleaning: false\r\n        }\r\n        freshPublic.onClean = async () => {\r\n            await this.startCleanPublicById(freshPublic.id)\r\n        }\r\n        const {publics} = this.state\r\n        const freshPublicIndex = publics.findIndex(\r\n            (item) => item.id === publicId\r\n        )\r\n        publics[freshPublicIndex] = freshPublic\r\n        this.setGroups(publics)\r\n    }\r\n\r\n    async getFreshPublic(public_id) {\r\n        return (await axios.get('https://hot-dog.site/api/refreshPublic', {\r\n            params: {\r\n                user_vk_id: window.user_id,\r\n                auth_key: window.auth_key,\r\n                id: public_id\r\n            }\r\n        })).data\r\n    }\r\n\r\n    getAccessTokenFromLink(link) {\r\n        const searchStartStr = '#access_token='\r\n        const searchEndStr = '&expires_in='\r\n        return link.slice(\r\n            link.indexOf(searchStartStr) + searchStartStr.length,\r\n            link.indexOf(searchEndStr)\r\n        )\r\n    }\r\n\r\n    getPublicById(publics, public_id) {\r\n        return publics.find((item) => item.id === public_id)\r\n    }\r\n\r\n    async showNotEnoughMoneyModal(money) {\r\n        const response = await swal({\r\n            title: 'Упс.. Недостаточно денег',\r\n            icon: 'error',\r\n            text: `Для очистки сообществ нужно еще ${money}р.\\nПополните, пожалуйста, баланс`,\r\n            button: {text: 'Пополнить'}\r\n        })\r\n        if (response) this.setState({redirect: '/add_money'})\r\n    }\r\n\r\n    async showCommentAlert() {\r\n        const response = await swal({\r\n            title: 'Спасибо!',\r\n            icon: 'success',\r\n            text: 'Оставьте, пожалуйста, отзыв о сервисе :)',\r\n            button: 'Хорошо'\r\n        })\r\n        if (response) this.setState({redirect: '/feedback'})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({clean}) => ({\r\n    groups: clean.groups,\r\n    hotDogsGroups: clean.hotDogsGroups,\r\n    cleanTasks: clean.cleanTasks\r\n})\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n    bindActionCreators({GetUserGroups, LoadGroups, LoadCleanTasks}, dispatch)\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CleanPage)\r\n","import React, {Component} from 'react'\r\nimport {NavLink} from 'react-router-dom'\r\nimport '../fonts/fontello/fontello.css'\r\n\r\nclass TopBar extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"nav\">\r\n                <nav>\r\n                    {/*<NavLink className=\"nav__item\" exact to=\"/\">*/}\r\n                    {/*Главная*/}\r\n                    {/*</NavLink>*/}\r\n                    <NavLink className=\"nav__item\" to=\"/clean\">\r\n                        Очистка\r\n                    </NavLink>\r\n                    <NavLink className={\"nav__item\"} to={\"/feedback\"}>Отзывы</NavLink>\r\n                    <NavLink className={\"nav__item\"} to={\"/add_money\"}>Пополнить баланс</NavLink>\r\n                </nav>\r\n                <div>\r\n                    <span className=\"balance\"><i className=\"icon-rouble\"/>{this.props.balance}р</span>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopBar\r\n","import React from 'react'\r\nimport './AddMoneyPage.css'\r\n\r\nclass AddMoneyPage extends React.Component {\r\n    componentWillMount() {\r\n        this.timerId = window.setInterval(() => {\r\n            this.props.updateBalance()\r\n        }, 1000)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.timerId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"add-money-page\">\r\n                <div className=\"text\">\r\n                    <p>Пополните баланс для очистки сообщества:</p>\r\n                </div>\r\n                <form\r\n                    action=\"https://money.yandex.ru/quickpay/confirm.xml\"\r\n                    method=\"post\"\r\n                    target=\"_blank\"\r\n                >\r\n                    <input\r\n                        type=\"hidden\"\r\n                        name=\"receiver\"\r\n                        value=\"410011043655449\"\r\n                    />\r\n                    <input type=\"hidden\" name=\"quickpay-form\" value=\"shop\" />\r\n                    <input type=\"hidden\" name=\"targets\" value=\"Hot Dog\" />\r\n\r\n                    <div className=\"money-input-wrapper\">\r\n                        <p>\r\n                            <label htmlFor=\"money-input\">Сумма:</label>\r\n                        </p>\r\n                        <input\r\n                            type=\"text\"\r\n                            name=\"sum\"\r\n                            placeholder=\"100 руб\"\r\n                            id=\"money-input\"\r\n                            className=\"money-input\"\r\n                            autoComplete=\"false\"\r\n                        />\r\n                        <p>Комиссия — 0%</p>\r\n                    </div>\r\n                    <div className=\"payment-type-wrapper\">\r\n                        <p>Способ оплаты:</p>\r\n                        <label>\r\n                            <input type=\"radio\" name=\"paymentType\" value=\"PC\" />\r\n                            Яндекс.Деньгами\r\n                        </label>\r\n                        <label>\r\n                            <input type=\"radio\" name=\"paymentType\" value=\"AC\" />\r\n                            Банковской картой\r\n                        </label>\r\n                    </div>\r\n                    <input\r\n                        type=\"hidden\"\r\n                        name=\"formcomment\"\r\n                        value=\"hot dog: пополнение баланса\"\r\n                    />\r\n                    <input\r\n                        type=\"hidden\"\r\n                        name=\"short-dest\"\r\n                        value=\"hot dog: пополнение баланса\"\r\n                    />\r\n                    <input type=\"hidden\" name=\"label\" value={`hot-dog: ${window.user_id}`} />\r\n                    <input\r\n                        type=\"hidden\"\r\n                        name=\"successURL\"\r\n                        value=\"https://vk.com/app6731681_-171466987\"\r\n                    />\r\n                    <button type=\"submit\" className=\"submit-button\">\r\n                        Пополнить\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddMoneyPage\r\n","import React from 'react'\r\nimport './FeedbackPage.css'\r\n\r\nclass FeedbackPage extends React.Component {\r\n    componentWillMount() {\r\n        /*global VK*/\r\n        // noinspection JSUnresolvedVariable, JSUnresolvedFunction\r\n        VK.Widgets.Comments('vk_comments', {\r\n            limit: 10,\r\n            attach: '*',\r\n            height: 800\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id=\"vk_comments\" className=\"vk-comments\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FeedbackPage\r\n","import React, {Component, Fragment} from 'react'\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom'\r\nimport CleanPage from './components/CleanPage/CleanPage'\r\nimport * as Sentry from '@sentry/browser'\r\nimport TopBar from './components/TopBar'\r\nimport AddMoneyPage from './components/AddMoneyPage/AddMoneyPage'\r\nimport axios from 'axios'\r\nimport FeedbackPage from './components/FeedbackPage/FeedbackPage'\r\n\r\nif (process.env.NODE_ENV === 'production') {\r\n    // noinspection JSUnresolvedVariable\r\n    Sentry.init({\r\n        dsn: process.env.REACT_APP_SENTRY_DSN\r\n    })\r\n}\r\n\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {}\r\n    }\r\n\r\n    setBalance(newBalance) {\r\n        this.setState({balance: newBalance})\r\n    }\r\n\r\n    async componentWillMount() {\r\n        window.user_id = getQueryParam('viewer_id') || '159204098'\r\n        window.auth_key = getQueryParam('auth_key') || '0819e4635b7c13f5f3de67f1e78bae72'\r\n        await this.updateBalance()\r\n    }\r\n\r\n    async getUserBalance() {\r\n        return (await axios.get('https://hot-dog.site/api/getBalance', {\r\n            params: {\r\n                user_vk_id: window.user_id,\r\n                auth_key: window.auth_key\r\n            }\r\n        })).data.balance\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({error})\r\n        Sentry.withScope((scope) => {\r\n            Object.keys(errorInfo).forEach((key) => {\r\n                scope.setExtra(key, errorInfo[key])\r\n            })\r\n            Sentry.captureException(error)\r\n        })\r\n    }\r\n\r\n    async updateBalance() {\r\n        this.setBalance(await this.getUserBalance())\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n                <Fragment>\r\n                    <TopBar balance={this.state.balance} />\r\n                    <Switch>\r\n                        <Route\r\n                            exact\r\n                            path=\"/\"\r\n                            render={() => (\r\n                                <CleanPage\r\n                                    balance={this.state.balance}\r\n                                    updateBalance={this.updateBalance.bind(this)}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route path=\"/clean\" component={CleanPage} />\r\n                        <Route\r\n                            path={'/add_money'}\r\n                            render={() => (\r\n                                <AddMoneyPage\r\n                                    updateBalance={this.updateBalance.bind(this)\r\n                                    }\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Route path={'/feedback'} component={FeedbackPage} />\r\n                    </Switch>\r\n                </Fragment>\r\n            </BrowserRouter>\r\n        )\r\n    }\r\n}\r\n\r\nfunction getQueryParam(param) {\r\n    const query = window.location.search.substring(1)\r\n    window.urlParams = query\r\n    const vars = query.split('&')\r\n    for (let i = 0; i < vars.length; i++) {\r\n        const pair = vars[i].split('=')\r\n        if (pair[0] === param) {\r\n            return pair[1]\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nexport default App\r\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from 'redux'\r\nimport clean from './reducer.clean'\r\n\r\nexport default combineReducers({\r\n    clean\r\n})\r\n","import {createStore, applyMiddleware, compose} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport rootReducer from './reducers/reducer.root'\r\n\r\nconst middleware = [thunk]\r\nconst devToolsExtension = window.devToolsExtension\r\nconst enhancers = []\r\n\r\nif (typeof devToolsExtension === 'function') {\r\n    enhancers.push(devToolsExtension())\r\n}\r\n\r\nconst composedEnhancers = compose(\r\n    applyMiddleware(...middleware),\r\n    ...enhancers\r\n)\r\n\r\nconst initialState = {}\r\n\r\nconst store = createStore(rootReducer, initialState, composedEnhancers)\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport {Provider} from 'react-redux'\r\nimport App from './app/App'\r\nimport './static/styles/app.css'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport store from './store/index'\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}